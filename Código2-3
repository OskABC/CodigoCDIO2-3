#include <Adafruit_ADS1X15.h>
#include <ESP8266WiFi.h>
#define power_pin 5
#define channelvalue 0
#define offset 0.00
#define PRINT_DEBUG_MESSAGES
#define WiFi_CONNECTION_UPV
#define REST_SERVER_THINGSPEAK


Adafruit_ADS1X15 ads1115; 


///////////////////////////////////////////////////////
/////////////// WiFi Definitions //////////////////////
///////////////////////////////////////////////////////

#ifdef WiFi_CONNECTION_UPV //Conexion UPV
  const char WiFiSSID[] = "GTI1";
  const char WiFiPSK[] = "1PV.arduino.Toledo";
#else //Conexion fuera de la UPV
  const char WiFiSSID[] = "MySSID";
  const char WiFiPSK[] = "MyPassWord";
#endif



////////////////////////////////////////////////////////
/////////////// SERVER Definitions /////////////////////
////////////////////////////////////////////////////////

#if defined(WiFi_CONNECTION_UPV) //Conexion UPV
  const char Server_Host[] = "proxy.upv.es";
  const int Server_HttpPort = 8080;
#elif defined(REST_SERVER_THINGSPEAK) //Conexion fuera de la UPV
  const char Server_Host[] = "api.thingspeak.com";
  const int Server_HttpPort = 80;
#else
  const char Server_Host[] = "dweet.io";
  const int Server_HttpPort = 80;
#endif

WiFiClient client;

///////////////////////////////////////////////////////
/////////////// HTTP REST Connection //////////////////
///////////////////////////////////////////////////////

#ifdef REST_SERVER_THINGSPEAK 
  const char Rest_Host[] = "api.thingspeak.com";
  String MyWriteAPIKey="W7B3KDSFDZQU21N4"; // Escribe la clave de tu canal ThingSpeak
#else 
  const char Rest_Host[] = "dweet.io";
  String MyWriteAPIKey="cdiocurso2022g06"; // Escribe la clave de tu canal Dweet
#endif

#define NUM_FIELDS_TO_SEND 5 //Numero de medidas a enviar al servidor REST (Entre 1 y 8)

/////////////////////////////////////////////////////
/////////////// Pin Definitions ////////////////
//////////////////////////////////////////////////////

const int LED_PIN = 5; // Thing's onboard, green LED

/////////////////////////////////////////////////////
/////////////// WiFi Connection ////////////////
//////////////////////////////////////////////////////

void connectWiFi()
{
  byte ledStatus = LOW;

  #ifdef PRINT_DEBUG_MESSAGES
    Serial.print("MAC: ");
    Serial.println(WiFi.macAddress());
  #endif
  
  WiFi.begin(WiFiSSID, WiFiPSK);

  while (WiFi.status() != WL_CONNECTED)
  {
    // Blink the LED
    digitalWrite(LED_PIN, ledStatus); // Write LED high/low
    ledStatus = (ledStatus == HIGH) ? LOW : HIGH;
    #ifdef PRINT_DEBUG_MESSAGES
       Serial.println(".");
    #endif
    delay(500);
  }
  #ifdef PRINT_DEBUG_MESSAGES
     Serial.println( "WiFi Connected" );
     Serial.println(WiFi.localIP()); // Print the IP address
  #endif
}

/////////////////////////////////////////////////////
/////////////// HTTP POST  ThingSpeak////////////////
//////////////////////////////////////////////////////

void HTTPPost(String fieldData[], int numFields){

// Esta funcion construye el string de datos a enviar a ThingSpeak mediante el metodo HTTP POST
// La funcion envia "numFields" datos, del array fieldData.
// Asegurate de ajustar numFields al número adecuado de datos que necesitas enviar y activa los campos en tu canal web
  
    if (client.connect( Server_Host , Server_HttpPort )){
       
        // Construimos el string de datos. Si tienes multiples campos asegurate de no pasarte de 1440 caracteres
   
        String PostData= "api_key=" + MyWriteAPIKey ;
        for ( int field = 1; field < (numFields + 1); field++ ){
            PostData += "&field" + String( field ) + "=" + fieldData[ field ];
        }     
        
        // POST data via HTTP
        #ifdef PRINT_DEBUG_MESSAGES
            Serial.println( "Connecting to ThingSpeak for update..." );
        #endif
        client.println( "POST http://" + String(Rest_Host) + "/update HTTP/1.1" );
        client.println( "Host: " + String(Rest_Host) );
        client.println( "Connection: close" );
        client.println( "Content-Type: application/x-www-form-urlencoded" );
        client.println( "Content-Length: " + String( PostData.length() ) );
        client.println();
        client.println( PostData );
        #ifdef PRINT_DEBUG_MESSAGES
            Serial.println( PostData );
            Serial.println();
            //Para ver la respuesta del servidor
            #ifdef PRINT_HTTP_RESPONSE
              delay(500);
              Serial.println();
              while(client.available()){String line = client.readStringUntil('\r');Serial.print(line); }
              Serial.println();
              Serial.println();
            #endif
        #endif
    }
}

////////////////////////////////////////////////////
/////////////// HTTP GET  ////////////////
//////////////////////////////////////////////////////

void HTTPGet(String fieldData[], int numFields){
  
// Esta funcion construye el string de datos a enviar a ThingSpeak o Dweet mediante el metodo HTTP GET
// La funcion envia "numFields" datos, del array fieldData.
// Asegurate de ajustar "numFields" al número adecuado de datos que necesitas enviar y activa los campos en tu canal web
  
    if (client.connect( Server_Host , Server_HttpPort )){
           #ifdef REST_SERVER_THINGSPEAK 
              String PostData= "GET https://api.thingspeak.com/update?api_key=";
              PostData= PostData + MyWriteAPIKey ;
           #else 
              String PostData= "GET http://dweet.io/dweet/for/";
              PostData= PostData + MyWriteAPIKey +"?" ;
           #endif
           
           for ( int field = 1; field < (numFields + 1); field++ ){
              PostData += "&field" + String( field ) + "=" + fieldData[ field ];
           }
          
           
           #ifdef PRINT_DEBUG_MESSAGES
              Serial.println( "Connecting to Server for update..." );
           #endif
           client.print(PostData);         
           client.println(" HTTP/1.1");
           client.println("Host: " + String(Rest_Host)); 
           client.println("Connection: close");
           client.println();
           #ifdef PRINT_DEBUG_MESSAGES
              Serial.println( PostData );
              Serial.println();
              //Para ver la respuesta del servidor
              #ifdef PRINT_HTTP_RESPONSE
                delay(500);
                Serial.println();
                while(client.available()){String line = client.readStringUntil('\r');Serial.print(line); }
                Serial.println();
                Serial.println();
              #endif
           #endif  
    }
}

// Montaje: Sal(A0), Humedad(A1), Temp(A2)
// Resistencias: Sal(Am,Mor,Marr) Temp(Roj,Roj,Roj)






/////////////////////////////////////////
//  Void setup()  ///////////////////////
/////////////////////////////////////////

void setup() {
  #ifdef PRINT_DEBUG_MESSAGES
    Serial.begin(9600);
  #endif
  Serial.println("Inicializamos la sonda");

  connectWiFi();
  
  ads1115.begin(0x48);
  ads1115.setGain(GAIN_ONE);

  #ifdef PRINT_DEBUG_MESSAGES
      Serial.print("Server_Host: ");
      Serial.println(Server_Host);
      Serial.print("Port: ");
      Serial.println(String( Server_HttpPort ));
      Serial.print("Server_Rest: ");
      Serial.println(Rest_Host);
  #endif
}





/////////////////////////////////////////
//  sensHum()  //////////////////////////
/////////////////////////////////////////

int sensHum(int pin){
  int channelValue = 0;
  int sensorValue = 0;
  int humidityValue = 0;

  sensorValue = ads1115.readADC_SingleEnded(pin);
  //10850 mojado
  //20640 seco

  humidityValue = map(sensorValue, 20640, 10850, 0, 100);

  if(humidityValue<0){
    return 0;
  }
  if(humidityValue>100){
    return 100;
  }
  return humidityValue;
}

/////////////////////////////////////////
//  sensSal()  //////////////////////////
/////////////////////////////////////////

int sensSal(){
  
  int16_t adc;
  int salinidad = 0;
  
  digitalWrite(power_pin, HIGH);  
  delay(100);

  adc = analogRead(A0);
  digitalWrite(power_pin, LOW);
  delay(100);

  Serial.println(adc, DEC);
  salinidad = 100*353 / (353-678) - adc*100 /(353 - 678);

  return salinidad;
}

/////////////////////////////////////////
//  sensTemp()  /////////////////////////
/////////////////////////////////////////

float sensTemp(int pin){
  int16_t adc = ads1115.readADC_SingleEnded(pin);

  float temperatura = ((((adc*4.096)/32767)-0.75)/0.037)-26;

  return temperatura;
}

/////////////////////////////////////////
//  senspH()  ///////////////////////////
/////////////////////////////////////////

double senspH(int pin){
  static float pHValue, voltage;

  int adc=ads1115.readADC_SingleEnded(pin);
  voltage= adc * 4.096 / 32767; 
  pHValue = 3.5 * voltage + offset;
  
  return pHValue;
}


/////////////////////////////////////////
//  sensLuz()  //////////////////////////
/////////////////////////////////////////

int sensLuz(int pin){
  int adc = ads1115.readADC_SingleEnded(0);

  //Serial.println(adc0);
  int iluminacion = map(adc , -14, 10, 100, 0);
  Serial.println(iluminacion);
 
  if(iluminacion<0){
    return 0;
  }
  if(iluminacion>100){
    return 100;
  }
  return iluminacion;
}

/////////////////////////////////////////
//  subirDatos()  ///////////////////////
/////////////////////////////////////////

void subirDatos(int hum, int sal, double temp, double pH, int luz){

  String data[ NUM_FIELDS_TO_SEND + 1];  // Podemos enviar hasta 8 datos

    
    data[ 1 ] = hum;

    data[ 2 ] = sal;

    data[ 3 ] = temp;

    data[ 4 ] = pH;

    data[ 5 ] = luz;

    //Selecciona si quieres enviar con GET(ThingSpeak o Dweet) o con POST(ThingSpeak)
    //HTTPPost( data, NUM_FIELDS_TO_SEND );
    HTTPGet( data, NUM_FIELDS_TO_SEND );
  
}






/////////////////////////////////////////
//  Void loop()  ////////////////////////
/////////////////////////////////////////

void loop() {
  
  //  Llamadas a funciones
  int hum = sensHum(0);
  
  int sal = sensSal();

  float temp = sensTemp(1);

  float pH = senspH(2);

  int luz = sensLuz(3);

  subirDatos(hum, sal, temp, pH, luz);

  delay(4800);
}
  return humidityValue;
}

/////////////////////////////////////////
//  sensSal()  //////////////////////////
/////////////////////////////////////////

int sensSal(){
  
  int16_t adc1;

  digitalWrite(power_pin, HIGH);  
  delay(100);

  int adc0 = analogRead(A0);
  digitalWrite(power_pin, LOW);
  delay(100);

  int salinidad = 100*353 / (353-678) - adc1*100 /(353 - 678);

  return salinidad;
}

/////////////////////////////////////////
//  sensTemp()  /////////////////////////
/////////////////////////////////////////

float sensTemp(){
  int16_t adc2 = ads1115.readADC_SingleEnded(2);

  float temperatura = ((((adc2*4.096)/32767)-0.75)/0.037)-5;

  return temperatura;
}

/////////////////////////////////////////
//  Void loop()  ////////////////////////
/////////////////////////////////////////

void loop() {
  
  //  Llamadas a funciones
  int hum = sensHum();
  
  float sal = sensSal();

  float temp = sensTemp();


  //Muestreo de los resultados en pantalla
  Serial.print("La humedad es del: ");
  Serial.print(hum);
  Serial.println("%");
  

  //Serial.print("La salinidad es de: ");
  //Serial.print(hum);
  //Serial.println("%");
  
  
  Serial.print("La temperatura es: ");
  Serial.print(temp);
  Serial.println(" ºC");
  
}
